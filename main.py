from fastapi import FastAPI
from pydantic import BaseModel
import subprocess
import json

app = FastAPI()

class SearchRequest(BaseModel):
    keyword: str
    region: str

# üü¢ –ö—Ä–∞—Å–∏–≤–∞—è –º–µ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞
print("=" * 50)
print("üöÄ Yandex Competitor API –∑–∞–ø—É—â–µ–Ω!")
print("üì° –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ /api/yandex-competitors")
print("=" * 50)

@app.post("/api/yandex-competitors")
def get_competitors(data: SearchRequest):
    region = data.region
    keyword = data.keyword

    print("üì• –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:")
    print(f"üåç –†–µ–≥–∏–æ–Ω: {region}")
    print(f"üîç –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")

    try:
        result = subprocess.run(
            ["python", "yandex_parser.py", region, keyword],
            capture_output=True,
            text=True,
            timeout=180
        )

        print("üü¢ STDOUT:")
        print(result.stdout)
        print("üî¥ STDERR:")
        print(result.stderr)

        # –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON
        try:
            parsed = json.loads(result.stdout)
            return {"results": parsed} if isinstance(parsed, list) else parsed
        except json.JSONDecodeError:
            return {
                "error": "‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON",
                "stdout": result.stdout,
                "stderr": result.stderr
            }

    except Exception as e:
        return {"error": f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {str(e)}"}
